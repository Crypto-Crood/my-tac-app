#!/bin/bash

# Ask for necessary inputs
echo -ne "\033[1;92mEnter project name: \033[0m" && read PROJECT_NAME
echo -ne "\033[1;92mEnter Chain ID: \033[0m" && read CHAIN_ID
echo -ne "\033[1;92mEnter RPC URL: \033[0m" && read RPC_URL
echo -ne "\033[1;92mEnter Verifier Name: \033[0m" && read VERIFIER_NAME
echo -ne "\033[1;92mEnter Verifier URL: \033[0m" && read VERIFIER_URL

# Convert first three letters of the project name to uppercase for the token symbol
TOKEN_SYMBOL=$(echo "$PROJECT_NAME" | cut -c1-3 | tr '[:lower:]' '[:upper:]')

# Recipient address
RECIPIENT="0xe520a1e97c6EF6f1FCCffEA580C9948C02c3dE65"

mkdir "$PROJECT_NAME"
cd "$PROJECT_NAME"

forge init

rm src/Counter.sol script/Counter.s.sol test/Counter.t.sol

forge install OpenZeppelin/openzeppelin-contracts --no-commit

cat > foundry.toml <<EOL
[profile.default]
src = "src"
out = "out"
libs = ["lib"]

[rpc_endpoints]
custom_rpc = "$RPC_URL"

[etherscan]
custom_rpc = { key = "abc", url = "$RPC_URL/api" }
EOL

export PRIVATE_KEY="9f5e460d3f11a21336283dacb5f5c0712dc72d2d58f2da948874d44f809d9ca7"

for ((i=3; i<=100; i++)); do
    echo -e "\033[1;92mDeploying contract ($i/100)...\033[0m"

    cat > "src/${PROJECT_NAME}_${i}.sol" <<EOL
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.28;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract ${PROJECT_NAME}_${i} is ERC20 {
    constructor() ERC20("${PROJECT_NAME}_${i}", "$TOKEN_SYMBOL") {
        _mint(msg.sender, 1000000 * 10**18); // Initial supply: 1,000,000 tokens
    }
}
EOL

    forge build

    DEPLOY_OUTPUT=$(forge create --rpc-url $RPC_URL \
                 --private-key $PRIVATE_KEY \
                 --chain-id $CHAIN_ID \
                 --broadcast \
                 "src/${PROJECT_NAME}_${i}.sol:${PROJECT_NAME}_${i}")

    CONTRACT_ADDRESS=$(echo "$DEPLOY_OUTPUT" | grep -oP 'Deployed to: \K0x[a-fA-F0-9]{40}')

    echo -e "\033[1;92mContract ($i) deployed at: $CONTRACT_ADDRESS\033[0m"

    forge verify-contract \
      --rpc-url $RPC_URL \
      --chain-id $CHAIN_ID \
      --verifier "$VERIFIER_NAME" \
      --verifier-url "$VERIFIER_URL" \
      $CONTRACT_ADDRESS \
      "src/${PROJECT_NAME}_${i}.sol:${PROJECT_NAME}_${i}"

    echo -e "\033[1;92mVerification for contract ($i) completed!\033[0m"

    echo -e "\033[1;92mSending 100 tokens from contract ($i) to $RECIPIENT...\033[0m"

    cast send $CONTRACT_ADDRESS \
        "transfer(address,uint256)" $RECIPIENT 100000000000000000 \
        --rpc-url $RPC_URL \
        --private-key $PRIVATE_KEY

    echo -e "\033[1;92m100 tokens sent from contract ($i) to $RECIPIENT!\033[0m"
done
